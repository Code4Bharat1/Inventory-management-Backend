generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  address   String?
  role      String   @default("customer")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bucket    Bucket?
  orders    Order[]
  shops     Shop[]   @relation("UserShops")
}

model Product {
  id                     String            @id @default(uuid())
  name                   String
  quantity               Int               @default(0)
  price                  Float?
  category               String?
  description            String?
  imageUrl               String?
  note                   String?
  minimumStock           Int?              @default(0)
  sku                    String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  bucketItems            BucketItem[]
  notification           Notification[]
  orderItems             OrderItem[]
  shopCategoriesProducts ProductCategory[]
  stockHistory           stockHistory[]
}

model Shop {
  id                String              @id @default(uuid())
  name              String              @unique
  description       String?
  logoUrl           String?
  slug              String              @unique
  ownerId           String
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  butketItems       BucketItem[]
  categories        Category[]
  notification      Notification[]
  order             Order[]
  orderNotification OrderNotification[]
  categoryRelations ProductCategory[]
  owner             User                @relation("UserShops", fields: [ownerId], references: [id])
}

model Bucket {
  id     String       @id @default(uuid())
  userId String       @unique
  user   User         @relation(fields: [userId], references: [id])
  items  BucketItem[]
}

model BucketItem {
  id        String  @id @default(uuid())
  bucketId  String
  productId String
  shopId    String
  quantity  Int     @default(1)
  bucket    Bucket  @relation(fields: [bucketId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  shop      Shop    @relation(fields: [shopId], references: [id])

  @@unique([bucketId, productId, shopId])
}

model Notification {
  id        String   @id @default(uuid())
  productId String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopId    String
  product   Product  @relation(fields: [productId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])

  @@index([productId])
}

model stockHistory {
  id          String   @id @default(uuid())
  productId   String
  oldQuantity Int
  newQuantity Int
  changeType  String
  note        String?
  createdAt   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Category {
  id          String            @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  shopId      String
  slug        String
  shop        Shop              @relation(fields: [shopId], references: [id])
  products    ProductCategory[]
}

model ProductCategory {
  productId  String
  shopId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  shop       Shop     @relation(fields: [shopId], references: [id])

  @@id([productId, shopId, categoryId])
}

model Order {
  id                 String              @id @default(uuid())
  userId             String
  shopId             String
  totalAmount        Float
  status             String
  createdAt          DateTime            @default(now())
  shop               Shop                @relation(fields: [shopId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
  orderItems         OrderItem[]
  orderNotifications OrderNotification[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model OrderNotification {
  id        String   @id @default(uuid())
  status    String   @default("PENDING")
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopId    String
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
}
