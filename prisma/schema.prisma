// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  address   String?
  role      String   @default("customer")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bucket    Bucket?
  orders    Order[]

  // One-to-many: A user can own multiple shops
  shops     Shop[]   @relation("UserShops")
}


model Product {
  id            String        @id @default(uuid())
  name          String
  quantity      Int           @default(0)
  price         Float?
  category      String?
  description   String?
  imageUrl      String?
  note          String?
  minimumStock  Int?          @default(0)
  notification Notification[]
  shopCategoriesProducts ProductCategory[] // Relation to explicit table
  stockHistory  stockHistory[] // Relation to stock history
  bucketItems  BucketItem[] // Relation to bucket items
  orderItems   OrderItem[] //relation to order items
  sku          String?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Shop {
  id                String             @id @default(uuid())
  name              String             @unique
  description       String?
  logoUrl           String?
  slug              String             @unique
  ownerId           String             // Required for ownership link
  owner             User               @relation("UserShops", fields: [ownerId], references: [id])
  isActive          Boolean            @default(true)
  categories        Category[]
  categoryRelations ProductCategory[]
  butketItems       BucketItem[]
  order             Order[]
  notification      Notification[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Bucket {
  id     String        @id @default(uuid())
  user   User          @relation(fields: [userId], references: [id])
  userId String        @unique
  items  BucketItem[]
}

model BucketItem {
  id         String     @id @default(uuid())
  bucket     Bucket     @relation(fields: [bucketId], references: [id])
  bucketId   String

  product    Product    @relation(fields: [productId], references: [id])
  productId  String

  shop       Shop       @relation(fields: [shopId], references: [id])
  shopId     String

  quantity   Int        @default(1)

  @@unique([bucketId, productId, shopId]) // Each product-shop pair only once per bucket
}


model Notification {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  message     String
  type        String
  isRead      Boolean  @default(false)
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([productId])
}
model stockHistory {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  oldQuantity Int
  newQuantity Int
  changeType  String   // e.g., "IN", "OUT", "ADJUSTMENT"
  note        String?
  createdAt   DateTime @default(now())

  @@index([productId]) // Index for faster lookups by product
}

model Category {
  id            String          @id @default(uuid())
  name          String
  description   String?
  imageUrl      String?
  shopId        String
  slug          String
  shop          Shop            @relation(fields: [shopId], references: [id])
  products      ProductCategory[]
}

model ProductCategory {
  productId     String
  shopId        String
  categoryId    String
  product       Product         @relation(fields: [productId], references: [id])
  shop          Shop            @relation(fields: [shopId], references: [id])
  category      Category        @relation(fields: [categoryId], references: [id])
  @@id([productId, shopId, categoryId])
}

model Order {
  id          String       @id @default(uuid())
  userId      String
  shopId      String
  totalAmount Float
  status      String
  user        User         @relation(fields: [userId], references: [id])
  shop        Shop         @relation(fields: [shopId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime     @default(now())
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}